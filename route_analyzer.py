#!/usr/bin/env python3
"""
Route Analyzer - –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç –∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
"""

import folium
import openrouteservice
import pandas as pd
import itertools
import time
import warnings
import argparse
import os
from openrouteservice.exceptions import ApiError
from API_ORS_key import orskey
from points import points

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouteService
client = openrouteservice.Client(key=orskey)

def get_distance_truck(coord1, coord2, max_attempts=5):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≥—Ä—É–∑–æ–≤–∏–∫–∞
    
    Args:
        coord1: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ (lat, lon)
        coord2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ (lat, lon)
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    
    Returns:
        float: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    for attempt in range(max_attempts):
        try:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ rate limit, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", UserWarning)
                route = client.directions(
                    coordinates=[coord1[::-1], coord2[::-1]],  # ORS –∂–¥—ë—Ç (lon, lat)
                    profile='driving-hgv',
                    format='geojson'
                )

            dist_m = route['features'][0]['properties']['segments'][0]['distance']
            return round(dist_m / 1000, 2)

        except ApiError as e:
            msg = str(e).lower()
            if "rate limit" in msg:
                wait = min(30, (attempt + 1) * 10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
                print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç API –ø—Ä–µ–≤—ã—à–µ–Ω, –∂–¥—ë–º {wait} —Å–µ–∫... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                time.sleep(wait)
                continue
            elif "could not find routable point" in msg:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç {coord1} ‚Üí {coord2}")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                return None
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {e}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
            time.sleep(5)
            continue
    print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return None

def build_distance_matrix():
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏
    """
    names = list(points.keys())
    n = len(names)

    # –°–æ–∑–¥–∞—ë–º DataFrame –∏ —Å—Ç–∞–≤–∏–º –¥–∏–∞–≥–æ–Ω–∞–ª—å "X"
    dist_df = pd.DataFrame(index=names, columns=names, dtype=object)
    for i in range(n):
        dist_df.iloc[i, i] = "X"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        existing = pd.read_csv("distance_matrix_partial.csv", index_col=0)
        for i in existing.index:
            dist_df.loc[i, existing.columns] = existing.loc[i]
        print("üîπ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    except FileNotFoundError:
        pass

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    total = n*(n-1)//2
    done = 0

    for i in range(n):
        for j in range(i+1, n):
            name_i, name_j = names[i], names[j]
            if pd.notna(dist_df.iloc[i, j]) and dist_df.iloc[i, j] not in ["-", ""]:
                done += 1
                continue

            coord_i, coord_j = points[name_i], points[name_j]
            dist = get_distance_truck(coord_i, coord_j)

            if dist is not None:
                dist_df.iloc[i, j] = dist
                dist_df.iloc[j, i] = dist
                print(f"{name_i} ‚Üî {name_j}: {dist:.2f} –∫–º")
            else:
                dist_df.iloc[i, j] = "-"
                dist_df.iloc[j, i] = "-"
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {name_i} ‚Üî {name_j}")

            done += 1
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            dist_df.to_csv("distance_matrix_partial.csv", encoding="utf-8-sig")
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å {done}/{total} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if done % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–µ–ª–∞–µ–º –±–æ–ª—å—à—É—é –ø–∞—É–∑—É
                time.sleep(5)
            else:
                time.sleep(1.5)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    outfile = "distance_matrix.xlsx"
    for i in range(10):
        try:
            dist_df.to_excel(outfile, index=True)
            print(f"\n‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {outfile}")
            break
        except PermissionError:
            print(f"‚ö†Ô∏è –§–∞–π–ª {outfile} –æ—Ç–∫—Ä—ã—Ç. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é.")
            outfile = f"distance_matrix_{i+1}.xlsx"

    return dist_df

def create_route_map():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏
    """
    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞ —Å–∫–ª–∞–¥–µ
    m = folium.Map(location=points["–°–∫–ª–∞–¥"], zoom_start=14)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
    for name, coords in points.items():
        folium.Marker(coords, popup=name).add_to(m)

    # –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –º–µ–∂–¥—É –∫–∞–∂–¥–æ–π –ø–∞—Ä–æ–π —Ç–æ—á–µ–∫
    total_routes = len(list(itertools.combinations(points.items(), 2)))
    current_route = 0
    
    for (name1, coords1), (name2, coords2) in itertools.combinations(points.items(), 2):
        current_route += 1
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ {current_route}/{total_routes}: {name1} ‚Üî {name2}")
        
        try:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ rate limit
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", UserWarning)
                route = client.directions(
                    coordinates=[coords1[::-1], coords2[::-1]],  # ORS –∂–¥—ë—Ç (lon, lat)
                    profile='driving-hgv',
                    format='geojson'
                )
            
            folium.PolyLine(
                locations=[list(reversed(coord)) for coord in route['features'][0]['geometry']['coordinates']],
                color="blue", weight=1, opacity=0.5
            ).add_to(m)
            print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {name1} ‚Üî {name2} –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {name1} ‚Üî {name2}: {e}")

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if current_route % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–µ–ª–∞–µ–º –±–æ–ª—å—à—É—é –ø–∞—É–∑—É
            time.sleep(5)
        else:
            time.sleep(2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É
    m.save("all_routes_map.html")
    print("‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ all_routes_map.html")
    return m

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    parser = argparse.ArgumentParser(description='Route Analyzer - –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç')
    parser.add_argument('--mode', choices=['map', 'matrix', 'both'], default='both',
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: map (—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∞), matrix (—Ç–æ–ª—å–∫–æ –º–∞—Ç—Ä–∏—Ü–∞), both (–æ–±–∞)')
    parser.add_argument('--clean', action='store_true',
                       help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º')
    
    args = parser.parse_args()
    
    if args.clean:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_files = ['distance_matrix_partial.csv', 'all_routes_map.html', 'distance_matrix.xlsx']
        for file in temp_files:
            if os.path.exists(file):
                os.remove(file)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Route Analyzer")
    print(f"üìä –¢–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(points)}")
    
    if args.mode in ['map', 'both']:
        print("\nüó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        create_route_map()
    
    if args.mode in ['matrix', 'both']:
        print("\nüìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π...")
        build_distance_matrix()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
